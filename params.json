{"name":"Introduction to R (session 2)","tagline":"","body":"\r\n## Goals for Session\r\n- Build a few plots available in base R.\r\n- Run a statistical test or two.\r\n\r\nLast session we imported data, performed some cleaning and modification to the data, then exported the new data frame as a .csv file.  Today we'll learn some plotting basics and run a statistical analysis or two.  Let's begin by loading data objects created in our last session.  This should be as simple as running your R script \"Intro2R_session1.R\".  There are multiple ways to do this, we'll use the  `source()` function.\r\n\r\n```{r}\r\n# First clear your work environment\r\nrm(list = ls())\r\n\r\n# Run your script\r\nsource(\"Intro2R_session1.R\")\r\n```\r\n\r\nNow we have our `Environment` populated with objects from last session.  Let's begin with a simple scatter plot.\r\n\r\n## Scatter Plot\r\nScatter plots are a very widely used plot type.  The function for a scatter plot is of the form `plot(x, y, arg1, arg2, ...)`.  Basic requirements of `plot()` are the x and y variables.  Remember, if you need help on a particular function enter `?function_name` in the console.  OK, let's make a scatter plot of dissolved organic carbon (DOC) vs. wetland extent.  First, assign values for the x and y variables.\r\n\r\n\r\n```{r}\r\n# Assign values to x and y\r\nx <- streamDOC$Wet\r\ny <- streamDOC$logDOC\r\n```\r\n\r\nNow that we have defined x and y we can input them to `plot()` as arguments.\r\n\r\n```{r }\r\n# Plot y vs. x\r\nplot(x, y)\r\n```\r\n\r\nNice! a plot.  But the axes labeling can be improved, and we need a figure title.  These can be modified by sending additional arguments to `plot()`.\r\n\r\n```{r}\r\n# Add a title and axes labels\r\nplot(x, y, main = \"Stream DOC as Function of Wetland Extent\",\r\n     xlab = \"Wetland Extent (fraction)\", ylab = \"log(DOC) (mg/L)\")\r\n```\r\n\r\nLet's change wetland extent from fraction to percent.  We already calculated this and appended to the streamDOC data frame in session 1.  Reassign object x as percent wetland extent and adjust the arguments to the plot function accordingly.\r\n\r\n```{r}\r\n# Reassign x as percent wetland extent\r\nx <- streamDOC$prcntWet\r\n\r\n# Plot and change the title and x-label\r\nplot(x, y, main = \"Stream DOC as Function of Wetland Extent\",\r\n     xlab = \"Wetland Extent (%)\", ylab = \"log(DOC) (mg/L)\")\r\n```\r\n\r\nLooks like there's a linear relationship here.  Let's explore it with a linear regression.  We'll use the linear regression function `lm()` and assign the output to object `reg1`.  We want to regress y against x, so ...\r\n\r\n```{r}\r\n# Run a linear regression\r\nreg1 <- lm(y ~ x)\r\n```\r\n\r\nHow well does this model fit the data?\r\n\r\n```{r}\r\n# Get the output summary of the linear regression\r\nsummary(reg1)\r\n```\r\n\r\nLooks pretty good.  Let's add the regression line to the figure.  Use the function `abline()`.\r\n\r\n```{r}\r\n# Replot\r\nplot(x, y, main = \"Stream DOC as Function of Wetland Extent\",\r\n     xlab = \"Wetland Extent (%)\", ylab = \"log(DOC) (mg/L)\")\r\n\r\n# Add the regression line to the plot\r\nabline(reg1)\r\n```\r\n\r\nNice!  If you want to export this figure, go to the `plots` tab and click `Export > Save As Image ...`.  This will pop-up a window in which you can dynamically set the dimensions of your figure and the specify the file type for export.\r\n\r\nNow suppose we want to revisit the plot of DOC vs wetland extent and distinguish data points associated with an upstream lake and those without an upstream lake.  First we would separate the \"lake\" and \"no lake\" data, but we already did this in our first session so we don't have to do that again.  So, next we'll plot log(DOC) vs. wetland extent for data with an upstream lake and make the data points black.  Then we'll add log(DOC) vs. wetland extent for data without an upstream lake, and make the points grey.  Note, this is done with the `points()` function.  What would happen if we used `plot()` again?  Finally, add a legend for clarity.\r\n\r\n```{r}\r\n# Plot data with an upstream lake\r\nx <- lake$prcntWet\r\ny <- lake$logDOC\r\nplot(x, y, pch = 16, col = \"black\", main = \"Stream DOC as Function of Wetland Extent\",\r\n     xlab = \"Wetland Extent (%)\", ylab = \"log(DOC) (mg/L)\")\r\n\r\n# Add points for data with no upstream lake\r\nx <- no.lake$prcntWet\r\ny <- no.lake$logDOC\r\npoints(x, y, pch = 16, col = \"grey\")\r\n\r\n# Add a legend\r\nlegend(\"topleft\", legend = c(\"Lakes\", \"No Lakes\"), pch = 16, col = c(\"grey\", \"black\"))\r\n```\r\n\r\n## Bar plot\r\nNext up ... the bar plot.  Let's make a bar plot of average DOC for streams with and without an upstream lake.  The `barplot()` function is our friend.  Basic requirements of `barplot()` are data and data names.\r\n\r\n```{r}\r\n# Assign data.\r\ndat <- c( mean(lake$DOC), mean(no.lake$DOC))\r\n\r\n# Assign data names.\r\ndat.names <- c( \"Lake\", \"No Lake\")\r\n```\r\n\r\nCheck the calculated means.  Uh oh!.  A \"NA\"!  Where did this come from?  Take a look at lake$DOC.  Yep, a NA value in row 35.  This observation needs to be removed, as any calculation incorporating a NA value results in a NA output.  Let's employ the function `na.omit()` to remove the NA value.  In the context of data frames, `na.omit()` will remove all values in the same row as the NA, so use wisely!  OK, let's try it again.\r\n\r\n```{r}\r\n# Remove NA values and assign data\r\ndat <- c( mean( na.omit(lake$DOC) ), mean(no.lake$DOC))\r\n```\r\n\r\nOK.  Where were we?  Ah yes, build the barplot and assign the appropriate title and axes labels.  Note `barplot()` has different argument requirements than `plot()`.\r\n\r\n```{r}\r\n# Plot data and assign labels\r\nbarplot(height = dat, names.arg = dat.names, main = \"Stream DOC, With and Without an Upstream Lake\",\r\n        ylab = \"DOC (mg/L)\")\r\n```\r\n\r\nHmmm ... perhaps this data could be better explored with a box plot.  Let's see.\r\n\r\n## Boxplot\r\nThe first argument of `boxplot()` asks for the y values to be plotted (in this case DOC concentration), followed by the tilde (i.e. '~'), then categorical information for the data (in this case \"Lake\" or \"No Lake\").  While we're at it, let's add a title and labels.\r\n\r\n```{r}\r\n# Plot data and assign labels\r\nboxplot(streamDOC$DOC ~ streamDOC$Type, names = c (\"Lake\", \"No Lake\"),\r\n         main = \"Stream DOC, With and Without an Upstream Lake\", ylab = \"DOC (mg/L)\")\r\n```\r\n\r\nThis gives us a better idea of the data distributions.  Are these distributions statistically different?  Specifically are the means of these two distributions statistically different?  Let's find out with a t-test.\r\n\r\n## t-test\r\nLike most functions, `t.test()` can be parameterized to accomodate different types of t-tests.  We'll run a basic \"student's t-Test\".  First assign x and y their respective values and run the test (x and y are the distributions for comparison).  Then run the t-test.\r\n\r\n```{r}\r\n# Assign values to x and y\r\nx <- lake$DOC\r\ny <- no.lake$DOC\r\n\r\n# Run the t-test\r\nt.test(x, y)\r\n```\r\n\r\nYep.  Looks like the means of our two distributions are statistically different.\r\n\r\n## Grouped Bar Plots\r\nGrouped bar plots are a bit more complicated than regular bar plots, but can be quite useful for information that a regular bar plot can not.  For this example we'll generate some artificial data representing a relationship between coarse woody habitat (CWH) and landscape position.\r\n\r\n```{r}\r\n# Assign average values of CWH relative to high and low landscape position\r\nlow = c(82.5, 13.93) # Low landscape\r\nhigh = c(36.07, 20.36) # High landscape\r\n```\r\n\r\nNext, let's bind these vectors along the column dimension using `cbind()`.  If we wanted to bind along the row dimension we'd use `rbind()`.  Also lets make a vector of names for the data.\r\n\r\n\r\n```{r}\r\n# Bind data along columns\r\ndat = cbind(low, high)\r\n\r\n# Name data\r\ndat.names = c(\"Low\", \"High\")\r\n```\r\n\r\nOK.  We're set.  Let's run `barplot()`.\r\n\r\n```{r}\r\n# Build barplot\r\nbarplot(height = dat, names.arg = dat.names, \r\n        ylab = \"CWH (logs/km)\", xlab = \"Landscape Position\", \r\n        legend.text = c(\"Low Development\", \"High Development\"))\r\n```\r\n\r\nHmmmmmmm.  This plot could be improved.  Let's extend the y limits and place the \"high development\" and \"low development\" bars along side one another.  This can be done with the `ylim` and `besides` arguments.  Also, put a title on that figure!\r\n\r\n```{r}\r\n# Rebuild barplot\r\nbarplot(height = dat, names.arg = dat.names, beside = TRUE, ylim = c(0, 100), \r\n        ylab = \"# logs/km\", xlab = \"Landscape Position\", \r\n        legend.text = c(\"Low Development\", \"High Development\"))\r\n```\r\n\r\nYeah, that's nice.  OK, time for one last plot.\r\n\r\n## Line plot\r\nLet's build a time series line plot of rainbow smelt and yellow perch densities in Crystal Lake from the North Temperate Lakes Long Term Ecological Research data set.  First read in the data from the file \"fishCR.csv\" and look at the data structure.\r\n\r\n```{r}\r\n# Read in the data\r\nfishCR <- read.csv(\"fishCR.csv\")\r\n\r\n# Look at the data structure\r\nstr(fishCR)\r\n```\r\n\r\nFor reasons similar to the lake/no-lake plot we built earlier, we will first plot the smelt series then add the perch series.  We'll use the argument `type = \"l\"` to get the function to output a line (as opposed to points), and the `col = \"color\"` argument to color the lines.  Then we'll add the perch series with the `lines()` function.  Finally, we'll add a legend.\r\n\r\n```{r}\r\n# Assign values to x and y for smelt data\r\nx <- fishCR$Year\r\ny <- fishCR$RS_per_year\r\n\r\n# Plot smelt time series\r\nplot(x, y, type = \"l\", col = \"blue\", main = \"Crystal Lake Smelt and Perch Populations\",\r\n     ylab = \"Catch (#)\", xlab = \"Year\")\r\n\r\n# Assign values to x and y for perch data\r\nx <- fishCR$Year\r\ny <- fishCR$YP_per_year\r\n\r\n# Add the perch line series\r\nlines(fishCR$Year, fishCR$YP_per_year, col = \"red\")\r\n\r\n# Add a legend.\r\nlegend(\"topleft\", legend = c(\"Rainbow Smelt\", \"Yellow Perch\"), \r\n       col = c(\"blue\",\"red\"), lty = 1, bty = \"n\")\r\n```\r\n\r\nNice job!  \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}